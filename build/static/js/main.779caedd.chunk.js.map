{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["override","css","App","Component","JBake","props","state","loading","JBakingGluten","JAllGluten","ABakingGluten","AAllGluten","JBaking","JAll","Quantity","OriginalQuantity","TotalGlutenBaking","TotalGlutenAll","TotalGluten","UchidaQuantity","Difference","TotalConvertedGluten","AtotalFlowerGluten","CalculatedBflour","CalculatedAflour","Gruten","handleChange1","bind","handleChange2","handleChange3","handleSubmit","event","this","setState","target","value","originalQuantity","Number","totalGlutenBaking","totalGlutenAll","totalGluten","uchidaQuantity","difference","totalConvertedGluten","atotalFlowerGluten","alert","i","goalQuantity","gruten","setTimeout","preventDefault","Form","onSubmit","Group","controlId","Label","Control","size","type","placeholder","onChange","Button","variant","className","color","Text","Table","striped","bordered","hover","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.779caedd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from 'react-bootstrap/Table';\nimport { css } from '@emotion/core';\nimport BeatLoader from \"react-spinners/BeatLoader\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nexport default class App extends Component {\n  render(){\n     return(\n          <div>\n             {/*other code*/}\n             <JBake />             \n          </div>\n     )\n  }\n}\n\nclass JBake extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      JBakingGluten: 0.118,\n      JAllGluten: 0.078,      \n      ABakingGluten: 0.127,\n      AAllGluten: 0.105,\n      JBaking: '',\n      JAll: '',\n      Quantity: '',\n      OriginalQuantity: '',\n      TotalGlutenBaking: '',\n      TotalGlutenAll: '',\n      TotalGluten: '',\n      UchidaQuantity: '',\n      Difference: '',\n      TotalConvertedGluten: '',\n      AtotalFlowerGluten: '',\n      CalculatedBflour: '',\n      CalculatedAflour: '',\n      Gruten: ''\n    };\n\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleChange3 = this.handleChange3.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n \n handleChange1(event) {\n  this.setState({JBaking: event.target.value});\n}\n \n handleChange2(event) {\n  this.setState({JAll: event.target.value});\n}\n\nhandleChange3(event) {\n  this.setState({Quantity: event.target.value});\n}\n\nhandleSubmit(event) {\n\n  this.setState({loading: true});\n\n  const originalQuantity = Number(this.state.JBaking) + Number(this.state.JAll);  \n  const totalGlutenBaking = Number(this.state.JBaking)*this.state.JBakingGluten\n  const totalGlutenAll = Number(this.state.JAll)*this.state.JAllGluten;\n  const totalGluten = totalGlutenBaking + totalGlutenAll;\n  const uchidaQuantity = Number(this.state.Quantity);\n  const difference = uchidaQuantity/originalQuantity\n  const totalConvertedGluten = totalGluten*difference;\n  const atotalFlowerGluten = Number(uchidaQuantity)*this.state.AAllGluten;\n  \n  if(atotalFlowerGluten>totalConvertedGluten)return(alert(\"Use All Purpose: \" + uchidaQuantity));\n  \n  this.setState({OriginalQuantity: originalQuantity});\n  this.setState({TotalGlutenBaking: totalGlutenBaking});\n  this.setState({TotalGlutenAll: totalGlutenAll});\n  this.setState({TotalGluten: totalGluten});\n  this.setState({UchidaQuantity: uchidaQuantity});\n  this.setState({Difference: difference});\n  this.setState({TotalConvertedGluten: totalConvertedGluten});\n  this.setState({AtotalFlowerGluten: atotalFlowerGluten});\n\n  let i = 0;\n  let goalQuantity = uchidaQuantity;\n  let gruten = 0;\n\n  while (gruten<totalConvertedGluten) {\n    gruten = (goalQuantity-i)*this.state.AAllGluten + i*this.state.ABakingGluten;\n    i++;\n  }\n\n  this.setState({CalculatedBflour: goalQuantity-i});\n  this.setState({CalculatedAflour: i});\n  this.setState({Gruten: gruten});\n\n  \n  setTimeout(() => {  this.setState({loading: false}); }, 1000);\n  event.preventDefault();\n}\n\n render() {\n   return( \n    <div> \n      <h1>パン算</h1>\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group controlId=\"enterFlourInfo\" onSubmit={this.handleSubmit}>\n          <Form.Label>日本レシピの強力粉</Form.Label>\n          <Form.Control size=\"lg\"　type=\"number\" placeholder=\"grams\" \n          value={this.state.JBaking}\n          onChange={this.handleChange1}\n          />\n\n          <Form.Label>日本レシピの中力粉</Form.Label>\n          <Form.Control size=\"lg\" type=\"number\" placeholder=\"grams\" \n          value={this.state.JAll}\n          onChange={this.handleChange2}\n          />\n\n          <Form.Label>アメリカ粉で今回使用したい総量</Form.Label>\n          <Form.Control size=\"lg\" type=\"number\" placeholder=\"grams\" \n          value={this.state.Quantity}\n          onChange={this.handleChange3}\n          />\n\n          <Button size=\"lg\" variant=\"primary\" type=\"submit\" className=\"m-3\">\n          計算          \n          </Button>\n          <BeatLoader\n          css={override}\n          size={15}\n          color={\"#123abc\"}\n          loading={this.state.loading}\n          />\n          <Form.Text className=\"text-muted\">\n          注意：すべて半角で入力する事\n          </Form.Text>          \n        </Form.Group>\n      </Form>\n\n      <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          <th>日本レシピ</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>強力粉</td>\n          <td>{this.state.JBaking}g</td>\n        </tr>\n        <tr>\n          <td>小麦粉</td>\n          <td>{this.state.JAll}g</td>\n        </tr>\n        <tr>\n          <td>総分量</td>\n          <td>{this.state.OriginalQuantity}g</td>\n        </tr>\n        <tr>\n          <td>強力粉グルテン</td>\n          <td>{Math.round(this.state.TotalGlutenBaking)}g</td>\n        </tr>\n        <tr>\n          <td>中力粉グルテン</td>\n          <td>{Math.round(this.state.TotalGlutenAll)}g</td>\n        </tr>\n        <tr>\n          <td>グルテン含有量</td>\n          <td>{Math.round(this.state.TotalGluten)}g</td>\n        </tr>                          \n      </tbody>\n    </Table>\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          <th>アメリカ・レシピ</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>総分量</td>\n          <td>{this.state.UchidaQuantity}g</td>\n        </tr>\n        <tr>\n          <td>分量差</td>\n          <td>{Math.round(this.state.Difference*100)/100}倍</td>\n        </tr>\n        <tr>\n          <td>目標グルテン</td>\n          <td>{Math.round(this.state.TotalConvertedGluten)}g</td>\n        </tr>\n        <tr>\n          <td>必要なBaking Flour分量:</td>\n          <td>{this.state.CalculatedBflour}g</td>\n        </tr>\n        <tr>\n          <td>必要なAll Purpose Flour量</td>\n          <td>{this.state.CalculatedAflour}g</td>\n        </tr>\n        <tr>\n          <td>実際のグルテン</td>\n          <td>{Math.round(this.state.Gruten)}g</td>\n        </tr>                                   \n      </tbody>\n    </Table>\n    </div>\n    );\n }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}